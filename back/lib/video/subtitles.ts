import {secondsToTime} from "../time";

export const createSubtitleFmtASS = async text => {
    let _text = text.replaceAll(/[\r\n]/g, ' ')
    _text = _text.replaceAll(/\s\s/g, ' ')

    const len = _text.length;
    const tmsp = 2;
    const dur = 43;

    const cs = dur / len;

    const minSplitLen = Math.trunc(len / (dur / tmsp))

    let arrRes = [];

    while (1) {
        const si = _text.lastIndexOf(' ', minSplitLen);
        if (si === -1) break;
        const it = _text.slice(0, si)
        _text = _text.slice(_text.lastIndexOf(' ', minSplitLen)).trim()
        arrRes.push(it);
    }
    arrRes.push(_text);


    let acc = `
[Script Info]
; Script generated by FFmpeg/Lavc59.18.100
ScriptType: v4.00+
;PlayResX: 384
;PlayResY: 288
ScaledBorderAndShadow: yes

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
`;

    if (arrRes.length === 0) return;
    let tm = 0, _tm = 0, lastIndex = arrRes.length - 1;
    arrRes = arrRes.map((it, i) => {
        tm += it.length * cs
        if (lastIndex === i) tm += 1;
        const r = `Dialogue: 0,${secondsToTime(_tm)},${secondsToTime(tm)},Default,,0,0,0,,${it}`;
        _tm = tm;
        return r;
    })

    acc += arrRes.join('\n')

    // await promises.writeFile('./sb.ass', acc);
    // console.log(acc)
    return acc;
};